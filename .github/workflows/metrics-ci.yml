name: Metrics CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/metrics/**'
      - '.github/workflows/metrics-ci.yml'
      - 'package.json'
      - 'bun.lockb'

  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/metrics/**'
      - 'package.json'
      - 'bun.lockb'

jobs:
  setup:
    name: Setup & Install
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Generate cache key
        id: cache-key
        run: echo "key=bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}" >> "$GITHUB_OUTPUT"

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        id: bun-cache
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            bun-

      - name: Install dependencies
        if: steps.bun-cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

  lint:
    name: Lint (ESLint)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            bun-

      - name: Install dependencies
        if: steps.bun-cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Run ESLint
        run: bunx eslint apps/metrics --ext .ts,.tsx,.js,.jsx

  build:
    name: Test Build
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            bun-

      - name: Install dependencies
        if: steps.bun-cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Build application
        working-directory: apps/metrics
        run: bun run build

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [setup, lint, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            bun-

      - name: Install dependencies
        if: steps.bun-cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Validate Vercel secrets
        run: |
          if [[ -z "$VERCEL_TOKEN" || -z "$VERCEL_PROJECT_ID" || -z "$VERCEL_ORG_ID" ]]; then
            echo "Error: Missing required Vercel secrets"
            exit 1
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Deploy to Vercel
        working-directory: apps/metrics
        run: |
          bunx vercel deploy --prod --yes \
            --token=$VERCEL_TOKEN \
            --scope=$VERCEL_ORG_ID \
            --project=$VERCEL_PROJECT_ID
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
