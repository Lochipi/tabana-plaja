name: Landing CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/landing/**'
      - '.github/workflows/landing-ci.yml'
      - 'package.json'
      - 'bun.lockb'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/landing/**'
      - '.github/workflows/landing-ci.yml'
      - 'package.json'
      - 'bun.lockb'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job 1: Install dependencies and cache
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Generate cache key
        id: cache-key
        run: echo "key=bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}" >> $GITHUB_OUTPUT

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        id: bun-cache
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            apps/landing/node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            bun-${{ hashFiles('**/bun.lockb') }}
            bun-

      - name: Install dependencies
        if: steps.bun-cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

  # Job 2: Linting
  lint:
    name: ESLint Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Restore Bun cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            apps/landing/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: bun install --frozen-lockfile

      - name: Run ESLint on landing
        run: |
          # Check if landing has its own package.json, otherwise run from root
          if [ -f "apps/landing/package.json" ]; then
            cd apps/landing
            bun run lint
          else
            # Run ESLint on landing directory from root
            bunx eslint apps/landing --ext .js,.jsx,.ts,.tsx
          fi
        continue-on-error: false

  # Job 3: Type checking
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Restore Bun cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            apps/landing/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: bun install --frozen-lockfile

      - name: Run TypeScript check
        run: |
          # Check if landing has its own tsconfig, otherwise use root
          if [ -f "apps/landing/tsconfig.json" ]; then
            cd apps/landing
            bun run type-check || npx tsc --noEmit
          else
            # Run TypeScript check from root
            npx tsc --noEmit --project . --include "apps/landing/**/*"
          fi

  # Job 4: Build test
  build:
    name: Build Test
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Restore Bun cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            apps/landing/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: bun install --frozen-lockfile

      - name: Build landing page
        run: |
          # Check if landing has its own build script, otherwise build from root
          if [ -f "apps/landing/package.json" ] && grep -q '"build"' apps/landing/package.json; then
            cd apps/landing
            bun run build
          else
            # Build from root (assuming Next.js app structure)
            bun run build
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: landing-build
          path: |
            .next/
            apps/landing/.next/
          retention-days: 1

  # Job 5: SEO Tests (Basic)
  seo-tests:
    name: SEO & Performance Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Restore Bun cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            apps/landing/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: bun install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: landing-build
          path: ./

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Start Next.js server and run Lighthouse
        run: |
          # Start the server (assuming Next.js app structure)
          bun run start &
          sleep 15
          # Test the landing page route
          lhci autorun --config='{"ci":{"collect":{"url":["http://localhost:3000/landing"],"numberOfRuns":1},"assert":{"assertions":{"categories:performance":["warn",{"minScore":0.7}],"categories:accessibility":["error",{"minScore":0.9}],"categories:seo":["error",{"minScore":0.9}]}}}}'
        env:
          PORT: 3000

  # Job 6: Unit Tests (if test script exists)
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Restore Bun cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            apps/landing/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies (if cache miss)
        run: bun install --frozen-lockfile

      - name: Check if test script exists
        id: check-tests
        run: |
          if [ -f "apps/landing/package.json" ] && grep -q '"test"' apps/landing/package.json; then
            echo "has-tests=true" >> $GITHUB_OUTPUT
            echo "test-location=landing" >> $GITHUB_OUTPUT
          elif grep -q '"test"' package.json; then
            echo "has-tests=true" >> $GITHUB_OUTPUT
            echo "test-location=root" >> $GITHUB_OUTPUT
          else
            echo "has-tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tests from landing directory
        if: steps.check-tests.outputs.has-tests == 'true' && steps.check-tests.outputs.test-location == 'landing'
        run: |
          cd apps/landing
          bun run test

      - name: Run tests from root (landing specific)
        if: steps.check-tests.outputs.has-tests == 'true' && steps.check-tests.outputs.test-location == 'root'
        run: |
          # Run tests that match landing directory
          bun run test -- apps/landing || echo "No landing-specific tests found"

  # Job 7: Deploy to Vercel (Preview)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [lint, typecheck, build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Vercel CLI
        run: bun add -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Landing Preview Deployed!**
              
              Preview URL: ${{ steps.deploy.outputs.preview-url }}/landing
              
              âœ… Pipeline Status:
              - Linting: Passed
              - Type Check: Passed  
              - Build: Passed
              - SEO Tests: ${context.payload.workflow_run?.conclusion || 'Running'}
              
              Changes to the landing page have been deployed to a preview environment.`
            })

  # Job 8: Deploy to Production
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [lint, typecheck, build, seo-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Vercel CLI
        run: bun add -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production-url=$url" >> $GITHUB_OUTPUT

      - name: Create deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: '${{ steps.deploy.outputs.production-url }}/landing',
              description: 'Landing page deployed successfully',
              context: 'vercel/deployment'
            })
